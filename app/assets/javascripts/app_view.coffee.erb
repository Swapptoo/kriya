extractURL = (textval) ->
  urlRegex = /\b((?:https?:\/\/|www\d{0,3}[.])(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s\`!()\[\]{};:\'\".,<>?«»“”‘’]))/img
  urlFinal = ''
  textval.replace(urlRegex, (url) -> urlFinal = url)
  urlFinal

filepickerKey = "Akt6oZj2YRamLQYtKyrhzz"

AppView = {
  initialize: ->
    $("#user_gender_female").off("change").on "change", @setFemaleAvatar
    $("#user_gender_male").off("change").on "change", @setMaleAvatar
    $("#post_body").off("input").on "input", @scrapeUrl
    $(".filepicker").off("click").on "click", @pickFile
    $("[data-modal]").off("click").on "click", @openModal.bind(this)
    $("#video-embed").off("input").on "input", @embedVideo
    $('form[method="get"][data-remote="true"]').off("submit").on "submit", @remoteSubmitGetForm
    $("[data-toggler]").off("click").on "click", @toggleToggler
    $(document).off("ajax:error").on "ajax:error", (event, xhr, status, error) ->
      console.log xhr.responseText
      console.log error

    document.addEventListener "turbolinks:before-cache", @preparePageForTurbolinks

    @initComponents()
    @initSemanticUI()
    @initChat()
    @initChatGoomp()
    @initEditor()
    @initInfinitePage()
    @initStripe()

  initStripe: ->
    key = $("meta[name=stripePublishableKey]").attr("content")
    goomp_id = -1
    handler = StripeCheckout.configure(
      key: key
      image: 'https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png',
      locale: 'auto',
      token: (token) ->
        console.log token
        $.post "/goomps/#{goomp_id}/join", token: token
        # You can access the token ID with `token.id`.
        # Get the token ID to your server-side code for use.
    )

    $(window).on 'popstate', -> handler.close()
    $(".stripe-button").click (e) ->
      e.preventDefault()
      $button = $(e.target)
      goomp_id = $button.data("id")
      handler.open(
        name: $button.data("name")
        description: $button.data("description")
        amount: $button.data("amount")
      )

  initInfinitePage: ->
    $('.js-infinite').infinitePages
      debug: true
      loading: ->
        $(this).text('Loading next page...')
      error: ->
        $(this).button('There was an error, please try again')

  toggleToggler: (e) ->
    e.preventDefault()
    toggler_id = $(e.target).data("toggler")
    console.log toggler_id
    $(e.target).remove()
    $("[data-toggle-id=#{toggler_id}]").show()
    $("[data-toggle-id=#{toggler_id}] input").focus()

  pickFile: (e) ->
    e.preventDefault()
    if filepicker
      options = {}
      $el = $(e.target)

      dimension = $el.data("dimension")
      ratio = $el.data("ratio")
      if dimension
        options.cropDim = [parseInt(dimension.split(',')[0]), parseInt(dimension.split(',')[1])]

      if ratio
        options.cropRatio = ratio

      filepicker.pick(options, (Blob) ->
        $el.parent().find("img").attr("src", Blob.url)
        $el.parent().find("input[type=hidden]").val(Blob.url)
      )

  openModal: (e) ->
    e.preventDefault()

    modal_id = $(e.target).data('modal')
    if modal_id == "post-modal"
      $("[data-modal-id=#{modal_id}]").modal(
        detachable: false
      )

      cleanContent = ""
      for k,v in @editor.serialize()
        cleanContent = v.value
      console.log cleanContent

    $("[data-modal-id=#{modal_id}]").modal('show')

  initSemanticUI: ->
    $('.ui.sidebar').sidebar('attach events', '.sidebar-toggle')
    $('.ui.checkbox').checkbox()
    $('.ui.rating').rating(
      maxRating: 5
      onRate: (val) ->
        ratable_id = $(this).data("ratable")
        $("[data-ratable-id=#{ratable_id}]").val val
    )
    $('[data-ratable=false]').rating('disable')
    $('[data-unratable]').rating('disable')
    $('.ui.dropdown').dropdown(on: 'hover')
    $("#new_post").form(
      fields:
        body:
          identifier: 'post[body]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter content'
          }]
        goomp_id:
          identifier: 'dropdown'
          rules: [{
            type   : 'empty',
            prompt : 'Please choose a goomp'
          }]
    )
    $("#new_goomp").form(
      on: 'blur'
      fields:
        cover:
          identifier: 'goomp[cover]'
          rules: [{
            type   : 'empty',
            prompt : 'Please upload cover'
          }]
        name:
          identifier: 'goomp[name]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter name'
          }]
        description:
          identifier: 'goomp[description]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter description'
          }]
    )
    $("#new_user").form(
      on: 'blur'
      fields:
        cover:
          identifier: 'user[picture]'
          rules: [{
            type   : 'empty',
            prompt : 'Please upload avatar'
          }]
        firstName:
          identifier: 'user[first_name]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter first name'
          }]
        lastName:
          identifier: 'user[last_name]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter last name'
          }]
        gender:
          identifier: 'user[gender]'
          rules: [{
            type   : 'empty',
            prompt : 'Please choose gender'
          }]
        email:
          identifier: 'user[email]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter email'
          }]
        headline:
          identifier: 'user[headline]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter headline'
          }]
        password:
          identifier: 'user[password]'
          rules: [{
            type   : 'empty',
            prompt : 'Please enter password'
          }]
        passwordConfirmation:
          identifier: 'user[password_confirmation]'
          rules: [{
            type   : 'empty',
            prompt : 'Please confirm password'
          }]
    )


  initChatGoomp: (target='#new-goomp-chat') ->
    if $(target).length > 0
      name = $(target).data("name")
      new Chat({
        greeting: [
          "Hi #{name}!"
          'Great work in creating a goomp.'
          'Take some time to decorate it with a cover photo etc. I will guide you through the rest of the set-up. '
          {
            type: 'choose',
            answers: [{
              'text': "Let's do it",
              'path': 'video'
            }]
          }
        ],

        video: [
          'First, let’s create an introductory video so anyone visiting your Goomp page will get the preview. ',
          """
            <input type="text" name="post[body]" id="video-embed" />
            <div id="video-preview"></div>
            <input type="submit" value="Add" class="ui button"></div>
          """,
          {
            type: 'choose',
            answers: [{
              'text': 'I don’t have a video! ',
              'path': 'write'
            }]
          }
        ],

        write: [
          'No video?'
          'Not a problem.'
          'Let’s publish a detailed introductory post.'
          'This will be a great chance for you to elaborate details of your group that can be used to promote your Goomp.'
          # '- <a target="_blank" href="https://medium.com/swlh/the-illusion-of-time-8f321fa2f191">The Illusion of Time</a><br>'+
          # '- <a target="_blank" href="https://www.smashingmagazine.com/2013/10/smart-transitions-in-user-experience-design/">Smart Transitions in UI Design</a><br>'+
          # '- <a target="_blank" href="http://azumbrunnen.me/blog/creating-distraction-free-reading-experiences/">Creating distraction-free reading experiences</a><br>',
          {
            type: 'visit',
            answers: [{
              'text': 'Write Story',
              'path': '/posts/new'
            }]
          }
        ],

        speaking: [
          'I love sharing ideas and meeting new people. I occasionally speak at UX conferences about design.',
          'Just recently, I talked about researching as a freelancer at UX Salon:',
          '<iframe width="420" height="315" src="https://www.youtube.com/embed/HVr4Cw1BPBc" frameborder="0" allowfullscreen></iframe>',
          'A great event. If you ever happen to go to Tel-Aviv, make sure you try the Shakshuka! 🍲',
          {
            type: "choose",
            answers: [{
              'text': 'Cool. Do you work too?',
              'path': 'companies-realwork'
            }]
          }
        ]
      }, {
        targetNode: target
      })

  initChat: (target='#my-chat') ->
    if $(target).length > 0
      name = $(target).data("name")
      new Chat({
        greeting: [
          "Hi #{name}!"
          'Welcome to Goomp. We are so excited to have you here.'
          'Goomp is still in beta, so feel free to create a goomp or join existing ones!'
          {
            type: 'visit',
            answers: [{
              'text': 'Create Goomp',
              'path': '/goomps/new'
            },
            {
              'text': 'Explore Goomps',
              'path': '/goomps'
            }]
          }
        ],

        tellmemore: [
          'I feel humbled. 🙂',
          '<form accept-charset="UTF-8" action="/goomps" class="ui form" method="post"><input name="_csrf_token" type="hidden" value="QVsIEyUncyURU2dFfRowT3hxCDMtAAAA2+jvPhKdI0/72wd554JaBQ=="><input name="_utf8" type="hidden" value="✓"><div class="center aligned field"><div class="center aligned field"><img id="user-avatar" src="/assets/default-male.png"></div><a class="filepicker ui primary button" data-dimension="1500,500">Upload Goomp Cover</a><input id="goomp_cover" name="goomp[cover]" type="hidden" value="/images/default-male.png"></div><div class="field"><label for="goomp_name">Name</label><input id="goomp_name" name="goomp[name]" type="text"></div><div class="field"><label for="goomp_description">Description</label><input id="goomp_description" name="goomp[description]" type="text"></div><input class="ui primary button" type="submit" value="Save"></form>',
          {
            type: 'choose',
            answers: [{
              'text': 'Which companies?',
              'path': 'companies'
            },
            {
              'text': 'You write?!',
              'path': 'write'
            }]
          }
        ],

        'simple-bye': [
          'Alright! It was great talking to you! Enjoy!'
        ],

        'companies-realwork': [
          'Hah!',
          'Writing and speaking is part of my job. It gives me a broader perspective and helps me solve problems.',
          'If you happen to be on Twitter, we should totally <a target="_blank" href="https://twitter.com/azumbrunnen_">talk</a> btw!',
          'You can also drop me a message here and I\'ll get back to you asap. Otherwise, I\'ll let you browse my website for a little bit.',
          {
            type: 'choose',
            answers: [{
              'text': 'Let\'s talk!',
              'path': 'contact'
            },
            {
              'text': 'I\'ll browse a little...',
              'path': 'simple-bye'
            }]
          }
        ],
        'companies': [
          'Here are some of the companies I\'ve worked with, both on staff and as an independent freelancer',
          '- Google<br>- iA<br>- Hinderling Volkart<br>- Red Bull<br>- The Guardian<br>',
          {
            type: 'choose',
            answers: [{
              'text': 'Cool. What did you do for them?',
              'path': 'portfolio'
            }]
          }
        ],


        'portfolio': [
          'I\'m happy to talk about it over coffee. What do you think?',
          {
            type: 'choose',
            answers: [{
              'text': 'Cool! ☕️',
              'path': 'contact-coffee'
            },
            {
              'text': 'Nah... 😑',
              'path': 'portfolio-nah'
            }]
          }
        ],
        'portfolio-nah': [
          'Alright... I understand. Coffee is not for everyone. How about tea then?',
          {
            type: 'choose',
            answers: [{
              'text': 'Ok, sure!',
              'path': 'contact'
            },
            {
              'text': 'Nah... 😒',
              'path': 'portfolio-nah-nah'
            }]
          }
        ],
        'portfolio-nah-nah': [
          'Seems like we don\'t have so much in common. That\'s ok! Working with different individuals is incredibly enriching.',
          'I suggest you drop me a line and I promise to get back to you asap! Cool?',
          {
            type: 'choose',
            answers: [{
              'text': 'Ok, sure!',
              'path': 'contact'
            },
            {
              'text': 'Nah... 😒!!',
              'path': 'hard-to-convince'
            }]
          }
        ],

        'hard-to-convince': [
          'Hmm... good chat! Maybe a little more about me... I like traveling and long walks on the beach.',
          'Speaking of beaches... I just came back from speaking Tel-Aviv. There was a great conference there.',
          'Mike Monteiro ended up fighting a robot on stage!',
          '<iframe border=0 frameborder=0 height=250 width=550 src="http://twitframe.com/show?url=https%3A%2F%2Ftwitter.com%2Fuxsalon%2Fstatus%2F722550897377677312"></iframe>',
          'Are you perhaps UX field too?',
          {
            type: "choose",
            answers: [{
              'text': 'Yes...',
              'path': 'uidesigner'
            },{
              'text': 'No!',
              'path': 'uidesigner-no'
            }]
          }
        ],

        'uidesigner-no': [
          'Interesting... I appreciate your interest in design.',
          'By the way, you should check out my friend Siri! She\'s hilarious. I think you guys would get along!',
          'Alright, gotta to run to a meeting now. Feel free to leave me a message! I\'ll read it asap.',
          {
            type: 'write',
            path: 'contact'
          }
        ],

        'uidesigner-yes': [
          'Hah! I thought so!',
          'If you come back here another time, I\'ll promise I\'ll share great UX articles with you! It was a pleasure talking to you!',
          'See you in a bit!',
        ],


        'contact': [
          'Great! I\'m looking forward to it!',
          'Let me know what\'s on your mind and I\'ll get back to you asap!',
          {
            type: 'write',
            path: 'contact-thanks'
          }
        ],
        'contact-coffee': [
          'Great! Nothing beats UX and coffee!',
          'What specifically did you want to discuss?',
          {
            type: 'write',
            path: 'contact-thanks'
          }
        ],
        'contact-thanks': [
          'I\'m intrigued! Thanks! I just need your email so I can get back to you!',
          {
            type: 'write',
            path: 'contact-verify-email',
          }
        ],
        'contact-verify-email': [
          'That\'s one beautiful email address! I\'ll get back to you as soon as possible.',
          'Meanwhile, you can scroll down and check my website or go to <a href="http://www.google.com">Google.com</a> and try pressing the "I feel lucky" button. It might be your lucky day!',
          'Talk to you soon! :)',
        ],


        write: [
          'Yes! I strongly believe that writing helps me be a better designer. You can check out some of my most popular articles:',
          '- <a target="_blank" href="https://medium.com/swlh/the-illusion-of-time-8f321fa2f191">The Illusion of Time</a><br>'+
          '- <a target="_blank" href="https://www.smashingmagazine.com/2013/10/smart-transitions-in-user-experience-design/">Smart Transitions in UI Design</a><br>'+
          '- <a target="_blank" href="http://azumbrunnen.me/blog/creating-distraction-free-reading-experiences/">Creating distraction-free reading experiences</a><br>',
          {
            type: "choose",
            answers: [{
              'text': 'What about speaking?',
              'path': 'speaking'
            },{
              'text': 'Let\'s talk!',
              'path': 'contact'
            }]
          }
        ],

        speaking: [
          'I love sharing ideas and meeting new people. I occasionally speak at UX conferences about design.',
          'Just recently, I talked about researching as a freelancer at UX Salon:',
          '<iframe width="420" height="315" src="https://www.youtube.com/embed/HVr4Cw1BPBc" frameborder="0" allowfullscreen></iframe>',
          'A great event. If you ever happen to go to Tel-Aviv, make sure you try the Shakshuka! 🍲',
          {
            type: "choose",
            answers: [{
              'text': 'Cool. Do you work too?',
              'path': 'companies-realwork'
            }]
          }
        ]
      }, {
        targetNode: target
      })

  setFemaleAvatar: ->
    url = ""
    val = $("#user_picture").val()
    if val.length == 0 || val.indexOf("default-male") > -1
      $("#user-avatar").attr("src", url)
      $("#user_picture").val(url)

  setMaleAvatar: ->
    url = ""
    val = $("#user_picture").val()
    if val.length == 0 || val.indexOf("default-female") > -1
      $("#user-avatar").attr("src", url)
      $("#user_picture").val(url)

  youtubeIframe: (vid) ->
    """
      <iframe width="480" height="270" src="https://www.youtube.com/embed/#{vid}?feature=oembed" frameborder="0" allowfullscreen></iframe>
    """

  vimeoIframe: (vid) ->
    """
      <iframe src="https://player.vimeo.com/video/#{vid}" width="640" height="360" frameborder="0" title="" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
    """

  extractVideoID: (url) ->
    youtubeRegex = /(?:youtube\.com\/\S*(?:(?:\/e(?:mbed))?\/|watch\/?\?(?:\S*?&?v\=))|youtu\.be\/)([a-zA-Z0-9_-]{6,11})/
    vimeoRegex = /([a-z\:\/]*\/\/)(?:www\.)?vimeo\.com\/(?:channels\/[A-Za-z0-9]+\/)?([A-Za-z0-9]+)/
    iframe = null

    if url.length > 0
      youtubeMatch = url.match(youtubeRegex)

      iframe = if youtubeMatch
        vid = youtubeMatch[youtubeMatch.length-1]
        youtubeIframe(vid)
      else
        vimeoMatch = url.match(vimeoRegex)
        vid = vimeoMatch[2]
        vimeoIframe(vid)

    return iframe

  embedVideo: (e) ->
    e.stopPropagation()
    text = $(e.target).val()
    url = extractURL(text)

    loader = """
      <div class="ui text loader">Loading</div>
    """

    if url.length > 0
      $("#video-preview").html extractVideoID(url)

  scrapeUrl: (e) ->
    e.stopPropagation()
    $form = $("#post_body").parents("form")

    unless $("#post_link_url", $form).val().length > 0
      text = $("#post_body").val()

      url = extractURL(text)
      $("#post_link_url", $form).val url

      if url.length > 0
        # text = text.replace(url, '')
        # $("#post_body").val(text)

        $.ajax(
          url: "/scrapes.json"
          type: "post"
          data:
            url: url
          success: (link) ->
            $("#post_link_title", $form).val link.title
            $("#post_link_image", $form).val link.image
            $("#post_link_description", $form).val link.description
            $("#link-card").html link.card
          error: (resp) ->
            link = resp.data
            console.log 'err', link
        )

  initComponents: ->
    filepicker?.setKey filepickerKey

  preparePageForTurbolinks: ->
    # Make sure chat board is clear if user go back
    $("#my-chat").html "" if $("#my-chat").length > 0
    # $(".ui.modals").remove() if $(".ui.modals").length > 0
    $(".ui.modal").hide()

  remoteSubmitGetForm: (e) ->
    separator = if this.action.indexOf('?') == -1 then '?' else '&'
    Turbolinks.visit(this.action+separator+$(this).serialize())
    return false

  initEditor: ->
    @editor = new MediumEditor('.editable',
      placeholder:
        text: 'Type your text'
        hideOnClick: false
    )
    $('.editable').mediumInsert(
      editor: @editor
      addons:
        images:
          # label: '<span class="typcn typcn-camera"></span>'
          fileUploadOptions:
            url: "https://www.filestackapi.com/api/store/S3?key=#{filepickerKey}"
        # embeds:
          # label: '<span class="typcn typcn-media-play"></span>'
    )
}

document.addEventListener "turbolinks:load", ->
  AppView.initialize()
